{"version":3,"sources":["app.js","jquery/go-to.js","model/image.js","component/upload/imagepreview.js","component/upload/imageuploader.js","page/designer/edit.js","page/designer/index.js","page/designer/show.js","page/place/index.js"],"names":[],"mappingszxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Define packages/namespaces\n\nvar app = {};\n\napp.model = {};\n\napp.controller = {};\n","// A custom jQuery plugin to scroll window to specific element.\n// Useage: $('#my-div').goTo();\n\n(function($) {\n    $.fn.goTo = function() {\n        $('html, body').animate({\n            scrollTop: $(this).offset().top - 20 + 'px'\n        }, 'fast');\n        return this; // for chaining...\n    }\n})(jQuery);\n","/**\n * Class: Image\n *\n * Namespace: app.model\n *\n * Model that represents an image from server.\n */\n\napp.model.Image = Backbone.Model.extend({\n    urlRoot: '/image'\n});\n","var ImagePreview = function (options) {\n    this.init(options).bindEvents();\n};\n\nImagePreview.prototype.init = function (options) {\n    if (typeof options.selector === 'string') {\n        this.element = $(options.selector);\n    } else if (typeof options.element === 'string') {\n        this.element = $(options.element);\n    } else if (typeof options.element === 'object') {\n        this.element = $(options.element);\n    } else if (typeof options.template === 'string') {\n        this.element = $(options.template).clone();\n    } else if (typeof options.template === 'object') {\n        this.element = $(options.template).clone();\n    }\n\n    this.width = 150;\n    this.height = 150;\n    if (typeof options.width === 'number' && typeof options.height === 'number') {\n        this.width = options.width;\n        this.height = options.height;\n    }\n\n    this.inputElement = this.element.find('input');\n    this.removeButton = this.element.find('.remove');\n    this.progressWraper = this.element.find('.progress');\n    this.progressBar = this.element.find('.progress-bar');\n    this.uploadProgress = 0;\n    this.imageId = parseInt(this.inputElement.val());\n    this.imageUrl = parseInt(this.inputElement.val());\n\n    return this;\n};\n\nImagePreview.prototype.bindEvents = function () {\n    var preview = this;\n\n    // Remove button\n    this.removeButton.click(function () {\n        preview.element.remove();\n    });\n\n    // Responsive size\n    this.updateSize();\n    $(window).resize(function () {\n        preview.updateSize();\n    });\n\n    return this;\n};\n\nImagePreview.prototype.progress = function (progress) {\n    if (progress === 'hide') {\n        this.progressWraper.hide();\n    } else if (progress === 'show') {\n        this.progressWraper.show();\n    } else if (typeof progress === 'number') {\n        this.uploadProgress = progress;\n        this.progressBar.css('width', progress + '%');\n    }\n\n    return this.uploadProgress;\n};\n\nImagePreview.prototype.image = function (id, url) {\n    this.imageId = id;\n    this.imageUrl = url;\n    this.element.css('background-image', 'url(\"' + url + '\")');\n    this.inputElement.val(id);\n\n    return {id: this.imageId, url: this.imageUrl};\n};\n\nImagePreview.prototype.size = function (width, height) {\n    if (arguments.length === 2) {\n        if(width > 0 && height > 0) {\n            this.width = width;\n            this.height = height;\n            this.updateSize();\n        }\n        return this;\n    } else {\n        return {width: this.width, height: this.height};\n    }\n};\n\nImagePreview.prototype.updateSize = function () {\n    this.element.css('width', this.width + 'px');\n    this.element.css('height', this.element.width() * this.height / this.width);\n};\n","/**\n * Button for uploading new images\n */\nvar ImageUploader = function (options) {\n\n    this.init(options);\n\n    this.bindEvents();\n\n    return this;\n};\n\n/**\n * Read options and setup object properties.\n *\n * [Options]\n * selector: string\n * element: string | jQuery | DOM\n * start: function\n *      When file uploading started, call this function.\n * done: function\n *      When file uploading finished or chosen, call this function.\n * fail: function\n *      When error occured, call this function.\n * multiple: boolean\n *      If the modal can choose multiple images, default value is false.\n */\nImageUploader.prototype.init = function (options) {\n\n    if (typeof options === 'object') {\n        // 'selector' or 'element' option to bind view.\n        if (typeof options.selector === 'string') {\n            this.element = $(options.selector);\n        } else if (typeof options.element === 'string') {\n            this.element = $(options.element);\n        } else if (typeof options.element === 'object') {\n            this.element = $(options.element);\n        }\n\n        // Callback functions\n        if (typeof options.start === 'function') {\n            this.start = options.start;\n        } else {\n            this.start = function () {};\n        }\n\n        if (typeof options.progress === 'function') {\n            this.progress = options.progress;\n        } else {\n            this.start = function () {};\n        }\n\n        if (typeof options.done === 'function') {\n            this.done = options.done;\n        } else {\n            this.done = function () {};\n        }\n\n        if (typeof options.fail === 'function') {\n            this.fail = options.fail;\n        } else {\n            this.fail = function () {};\n        }\n\n        if (typeof options.multiple === 'boolean') {\n            this.multiple = options.multiple;\n        } else {\n            this.multiple = false;\n        }\n    } else {\n        return null;\n    }\n\n    this.uploadButton = this.element.find('button.upload-button');\n    this.chooseButton = this.element.find('button.choose-button');\n    this.fileInput = this.element.find('input[type=\"file\"]');\n    this.chooseModal = this.element.find('div.modal').modal('hide');\n\n    if (this.multiple) {\n        this.fileInput.prop('multiple', true);\n    }\n\n    return this;\n};\n\n/**\n * Initialize user interaction events.\n */\nImageUploader.prototype.bindEvents = function () {\n\n    var uploader = this;\n\n    this.uploadButton.click(function () {\n        uploader.fileInput.click();\n    });\n\n    var count = 0; // Count all uploading jobs\n    // When selected a file from file dialog, show preview and upload image\n    this.fileInput.change(function () {\n        for (var i = 0; i < this.files.length; i++) {\n            var file = this.files[i];\n\n            var data = new FormData();\n            data.append('_token', csrfToken);\n            data.append('image', file);\n\n            // Upload file one by one...\n            // index is the job id of every uploading in queue.\n            (function(index){\n                uploader.start(index); // Callback function\n\n                $.ajax({\n                    method: 'POST',\n                    url: '/image',\n                    data: data,\n                    processData: false,\n                    contentType: false,\n                    dataType: 'json',\n                    xhr: function() {\n                        var xhr = new window.XMLHttpRequest();\n\n                        xhr.upload.addEventListener(\"progress\", function(evt) {\n                            if (evt.lengthComputable) {\n                                var percentComplete = evt.loaded / evt.total;\n                                percentComplete = parseInt(percentComplete * 100);\n                                uploader.progress(percentComplete, index); // Callback function\n                            }\n                        }, false);\n\n                        return xhr;\n                    }\n                }).done(function (response) {\n                    var image = response;\n                    uploader.done(image, index); // Callback function\n                }).fail(function (response) {\n                    var error = response;\n                    uploader.fail(error, index); // Callback function\n                });\n            })(count);\n\n            count++;\n\n            // If it is not multiple image uploader, only upload the first one.\n            if (!uploader.multiple) {\n                break;\n            }\n        }\n    });\n\n    this.chooseButton.click(function () {\n        uploader.chooseModal.modal('show');\n    });\n};\n","/**\n * Control designer edit form.\n *\n * View - views/designer/edit.blade.php\n * Style - assets/sass/_edit-layout.scss\n * Script - assets/js/edit/ajax/designer-edit.js\n */\n\n$(function () {\n\n    // Page check\n    if ($('#designer-edit-page').length === 0) {\n        return;\n    }\n\n    // Initialize TinyMCE\n    tinymce.init({\n        selector: 'textarea.tinymce',\n        menubar: false,\n        content_css: ['/css/app.css', '/css/editor.css'],\n        setup: function (editor) {\n            editor.on('change', function () {\n                editor.save();\n            });\n        }\n    });\n\n    // Initialize ImageUploader for main image\n    var imagePreview = new ImagePreview({\n        selector: '#image-form-group .image-preview',\n        width: 600,\n        height: 200\n    });\n\n    var imageUploader = new ImageUploader({\n        selector: '#image-form-group .image-uploader',\n        start: function () {\n            imagePreview.progress('show');\n        },\n        progress: function (percentage) {\n            imagePreview.progress(percentage);\n        },\n        done: function (image) {\n            imagePreview.progress('hide');\n            imagePreview.image(image.id, image.file_urls.medium);\n        },\n        fail: function (error) {\n            imagePreview.progress('hide');\n            console.log(error);\n        }\n    });\n\n    // Initialize ImageUploader for image gallery\n    var oldPreviews = [];\n    $('#gallery-form-group .image-gallery .image-preview').each(function () {\n        var preview = new ImagePreview({\n            element: this\n        });\n        oldPreviews.push(preview);\n    });\n\n    Sortable.create($('.image-gallery')[0], {animation: 300});\n\n    var newPreviews = [];\n\n    var galleryUploader = new ImageUploader({\n        selector: '#gallery-form-group .image-uploader',\n        multiple: true,\n        start: function (index) {\n            var preview = new ImagePreview({\n                template: $($('#gallery-form-group template').prop('content')).find('.image-preview')\n            });\n            $('.image-gallery').append(preview.element);\n            preview.progress('show');\n            newPreviews.push(preview);\n        },\n        progress: function (percentage, index) {\n            newPreviews[index].progress(percentage);\n        },\n        done: function (image, index) {\n            newPreviews[index].progress('hide');\n            newPreviews[index].image(image.id, image.file_urls.thumb);\n            console.log(index);\n        },\n        fail: function (error, index) {\n            newPreviews[index].progress('hide');\n            console.log(error);\n        }\n    });\n\n    // Submit form\n    $('button[type=\"submit\"]').click(function (e) {\n        e.preventDefault();\n\n        $.ajax({\n            method: 'PUT',\n            url: $('#designer-edit-form').attr('action'),\n            data: $('#designer-edit-form').serializeArray()\n        }).done(function () {\n            window.location.href = $('#designer-edit-form').attr('action');\n        }).fail(function (error) {\n            var response = error.responseJSON;\n            var $alert = $('#designer-edit-form .alert');\n            var message = '';\n\n            for (var id in response) {\n                message += '<p>' + response[id] + '</p>';\n            }\n\n            $alert.html(message).show().goTo();\n        });\n    });\n\n    // Country and city select, use Select2.\n    $(\"select#country-select\").select2({theme: 'bootstrap'});\n    $(\"select#city-select\").select2({theme: 'bootstrap'});\n\n    // Tag select, use Select2\n    $(\"select#tag-select\").select2({tags: true, theme: 'bootstrap'});\n});\n","$(function () {\n\n    var $grid = $('#story-list .grid')\n\n    if ($grid.length === 0) {\n        return;\n    }\n\n    $grid.masonry({\n        itemSelector: '.grid-item', // use a separate class for itemSelector, other than .col-\n        columnWidth: '.grid-item',\n        percentPosition: true\n    });\n\n    $grid.find('.story .expand-button').click(function () {\n        $(this).parent('.story').toggleClass('expanded');\n        $(this).siblings('.content').scrollTop(0);\n        $grid.masonry();\n    });\n});\n","$(function () {\n\n    if($('#designer-show-page').length === 0) {\n        return;\n    }\n\n    // Header starts\n    var $header = $('header');\n\n    updateHeaderHeight();\n\n    $(window).resize(updateHeaderHeight);\n\n    function updateHeaderHeight() {\n        var height = $header.width() / 3;\n        $header.css('height', height);\n    }\n\n    BackgroundCheck.init({\n        targets: 'header .target',\n        images: 'header',\n        threshold: 80,\n        minComplexity: 20\n    });\n    // Header ends\n\n    // Gallery starts\n    $('.gallery').lightGallery({\n        thumbWidth: 100,\n        thumbContHeight: 120\n    });\n    // Gallery ends\n});\n","var map;\nfunction initMap() {\n  map = new google.maps.Map(document.getElementById('place-map-draw'), {\n    center: {lat: -34.397, lng: 150.644},\n    zoom: 8\n  });\n}\n\n$(function () {\n    $('#place-map-inner').affix({\n        offset: {\n            top: function () {\n                return this.top = $('#kanibar').outerHeight(true) + 20;\n            },\n            bottom: function () {\n                return this.bottom = $('footer').outerHeight(true) + 20;\n            }\n        }\n    });\n});\n"],"sourceRoot":"/source/"}