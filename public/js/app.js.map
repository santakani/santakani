{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/**\n * Currently only load own JavaScript, not third-party libraries.\n */\n\n// jQuery plugins\nrequire('./jquery/go-to');\n\n// Utilities\nrequire('./utility/template');\n\n// Pages\nrequire('./page/designer/edit');\n\n},{\"./jquery/go-to\":3,\"./page/designer/edit\":5,\"./utility/template\":6}],2:[function(require,module,exports){\n'use strict';\n\nvar Image = require('../model/image');\n\nmodule.exports = Backbone.Collection.extend({\n\n    model: Image,\n\n    url: '/image'\n\n});\n\n},{\"../model/image\":4}],3:[function(require,module,exports){\n'use strict';\n\n// A custom jQuery plugin to scroll window to specific element.\n// Useage: $('#my-div').goTo();\n\n(function ($) {\n    $.fn.goTo = function () {\n        $('html, body').animate({\n            scrollTop: $(this).offset().top - 20 + 'px'\n        }, 'fast');\n        return this; // for chaining...\n    };\n})(jQuery);\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/**\n * Class: ImageModel\n *\n * See https://github.com/santakani/santakani.com/wiki/Models#image\n */\n\nmodule.exports = Backbone.Model.extend({\n\n    defaults: {\n        'progress': false, // Upload progress. Uploading: int, 0-100(%); uploaded: false.\n        'selectable': false,\n        'selected': false\n    },\n\n    urlRoot: '/image',\n\n    upload: function upload(image) {\n        var that = this;\n\n        if (image === undefined) {\n            if (this.image === undefined) {\n                var image = this.image;\n            } else {\n                var image = null;\n            }\n        }\n\n        var data = new FormData();\n        data.append('_token', csrfToken);\n        data.append('image', image);\n\n        $.ajax({\n            method: 'POST',\n            url: '/image',\n            data: data,\n            processData: false,\n            contentType: false,\n            dataType: 'json',\n            xhr: function xhr() {\n                var xhr = new window.XMLHttpRequest();\n\n                xhr.upload.addEventListener(\"progress\", function (evt) {\n                    if (evt.lengthComputable) {\n                        var percentComplete = evt.loaded / evt.total;\n                        percentComplete = parseInt(percentComplete * 100);\n                        that.set({ progress: percentComplete });\n                    }\n                }, false);\n\n                return xhr;\n            }\n        }).done(function (data) {\n            that.set(data);\n            that.set({ progress: false });\n        }).fail(function (data) {\n            console.log(data);\n        });\n    }\n});\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\n/**\n * Control designer edit form.\n *\n * View - views/designer/edit.blade.php\n * Style - assets/sass/_edit-layout.scss\n * Script - assets/js/edit/ajax/designer-edit.js\n */\n\nvar ImagePreview = require('../../view/image-preview');\nvar Image = require('../../model/image');\nvar ImageManager = require('../../view/image-manager');\n\n$(function () {\n\n    // Page check\n    if ($('#designer-edit-page').length === 0) {\n        return;\n    }\n\n    // Image manager\n    var manager = new ImageManager({\n        parentType: 'designer',\n        parentId: 1\n    });\n\n    // Cover\n    var coverImage = new Image({\n        id: $('#image-form-group .image-preview').data('id'),\n        file_urls: {\n            medium: $('#image-form-group .image-preview').data('url')\n        }\n    });\n    var coverPreview = new ImagePreview({\n        el: '#image-form-group .image-preview',\n        model: coverImage,\n        width: 600,\n        height: 200,\n        imageSize: 'medium'\n    });\n    $('#image-form-group button').click(function () {\n        manager.call({\n            multiple: false,\n            done: function done(image) {\n                coverImage.set(_.omit(image.attributes, 'selectable', 'selected', 'progress'));\n                $('#image-form-group input[type=\"hidden\"]').val(image.get('id'));\n            }\n\n        });\n    });\n\n    // Initialize TinyMCE\n    tinymce.init({\n        selector: 'textarea.tinymce',\n        menubar: false,\n        content_css: ['/css/app.css', '/css/editor.css'],\n        setup: function setup(editor) {\n            editor.on('change', function () {\n                editor.save();\n            });\n        }\n    });\n\n    // Submit form\n    $('button[type=\"submit\"]').click(function (e) {\n        e.preventDefault();\n\n        $.ajax({\n            method: 'PUT',\n            url: $('#designer-edit-form').attr('action'),\n            data: $('#designer-edit-form').serializeArray()\n        }).done(function () {\n            window.location.href = $('#designer-edit-form').attr('action');\n        }).fail(function (error) {\n            var response = error.responseJSON;\n            var $alert = $('#designer-edit-form .alert');\n            var message = '';\n\n            for (var id in response) {\n                message += '<p>' + response[id] + '</p>';\n            }\n\n            $alert.html(message).show().goTo();\n        });\n    });\n\n    // Country and city select, use Select2.\n    $(\"select#country-select\").select2({ theme: 'bootstrap' });\n    $(\"select#city-select\").select2({ theme: 'bootstrap' });\n\n    // Tag select, use Select2\n    $(\"select#tag-select\").select2({ tags: true, theme: 'bootstrap' });\n});\n\n},{\"../../model/image\":4,\"../../view/image-manager\":7,\"../../view/image-preview\":8}],6:[function(require,module,exports){\n'use strict';\n\n// Some template loading and parsing function\n\n// Load template from external HTML files\nmodule.exports.loadFile = function (url, callback) {\n    $.get(url, function (templateString) {\n        callback(templateString);\n    }, 'html');\n};\n\n// Load template from DOM, return null if not exists.\nmodule.exports.load = function (element) {\n    if ($(element).length) {\n        return $(element).html();\n    } else {\n        return 'Template not found.';\n    }\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\n/**\n * Provide a modal to upload and manage images. Select image to insert to article,\n * set cover image, avatar and so on. Can filter images belong to specifec user,\n * or page.\n */\n\nvar ImageList = require('../collection/image-list');\nvar Image = require('../model/image');\nvar ImagePreview = require('./image-preview');\n\nmodule.exports = Backbone.View.extend({\n\n    el: '#image-manager',\n\n    multiple: false, // If can select more than one image\n\n    max: 10, // How many images can be selected at once\n\n    done: function done() {}, // Callback after selection succeed, to be override\n\n    fail: function fail() {}, // Callback after selection fail, to be override\n\n    parentType: null, // Type of images' parent model, such as designer, place\n\n    parentId: null, // Id of images' parent model\n\n    previews: [], // List of sub-view ImagePreview\n\n    my: false, // Whether fetch only my uploads\n\n    events: {\n        'click .upload-button': 'openFileBrowser',\n        'change .file-input': 'uploadImages',\n        'click .cancel-button': 'cancelSelect',\n        'click .ok-button': 'finishSelect'\n    },\n\n    initialize: function initialize(options) {\n        _.extend(this, _.pick(options, 'parentType', 'parentId', 'my', 'fail'));\n\n        this.collection = new ImageList();\n\n        this.listenTo(this.collection, 'add', this.addImage);\n        this.listenTo(this.collection, 'all', this.updateOkButton);\n\n        var data = {};\n        if (this.my) {\n            data['my'] = true;\n        } else if (this.parentType !== null && this.parentId !== null) {\n            data[this.parentType] = this.parentId;\n        }\n\n        this.collection.fetch({\n            data: data\n        });\n    },\n\n    render: function render() {\n        return this;\n    },\n\n    call: function call(options) {\n        _.extend(this, _.pick(options, 'multiple', 'max', 'done', 'fail'));\n        this.resetSelect();\n        this.$el.modal('show');\n    },\n\n    resetSelect: function resetSelect() {\n        _.each(this.collection.models, function (model) {\n            model.set({\n                selected: false\n            });\n        });\n        var that = this;\n        _.each(this.previews, function (preview) {\n            preview.multiple = that.multiple;\n        });\n    },\n\n    openFileBrowser: function openFileBrowser() {\n        this.$('.file-input').click();\n    },\n\n    uploadImages: function uploadImages() {\n        var files = this.$('.file-input')[0].files;\n        for (var i = 0; i < files.length; i++) {\n            var image = new Image({\n                id: 0,\n                selectable: true,\n                selected: true\n            });\n            image.upload(files[i]);\n            this.collection.add(image);\n        }\n    },\n\n    /**\n     * Fetch uploaded images from server.\n     */\n    addImage: function addImage(image) {\n        image.set({\n            selectable: true,\n            selected: true\n        });\n        var preview = new ImagePreview({ model: image });\n        this.$('.gallery').prepend(preview.$el);\n        this.previews.push(preview);\n        this.listenTo(preview, 'select', this.unselectSiblings);\n        this.closeAlert();\n    },\n\n    unselectSiblings: function unselectSiblings(preview) {\n        _.each(_.without(this.previews, preview), function (preview) {\n            preview.unselect();\n        });\n    },\n\n    showAlert: function showAlert(message, type) {\n        if (!type || _.contains(['success', 'info', 'warning', 'danger'], type)) {\n            type = 'info';\n        }\n        this.$('.alert').removeClass('alert-info alert-success alert-warning alert-danger').addClass('alert-').text(message).show();\n    },\n\n    closeAlert: function closeAlert() {\n        this.$('.alert').hide();\n    },\n\n    updateOkButton: function updateOkButton() {\n        if (this.collection.where({ selected: true }).length > 0) {\n            this.$('.ok-button').prop('disabled', false);\n        } else {\n            this.$('.ok-button').prop('disabled', true);\n        }\n    },\n\n    cancelSelect: function cancelSelect() {\n        this.fail();\n    },\n\n    finishSelect: function finishSelect() {\n        var selectedImages = this.collection.where({ selected: true });\n        if (this.multiple) {\n            this.done(selectedImages);\n        } else {\n            this.done(selectedImages[0]);\n        }\n        this.$el.modal('hide');\n    }\n\n});\n\n},{\"../collection/image-list\":2,\"../model/image\":4,\"./image-preview\":8}],8:[function(require,module,exports){\n'use strict';\n\n/**\n * Image thumbnail used for image upload, select and management.\n * Bind to model Image.\n *\n * Class: ImagePreview\n */\n\nvar tpl = require('../utility/template');\n\nmodule.exports = Backbone.View.extend({\n\n    tagName: 'div',\n\n    className: 'image-preview',\n\n    template: _.template(tpl.load('#image-preview-template')),\n\n    width: 150,\n\n    height: 150,\n\n    imageSize: 'thumb',\n\n    removeable: false,\n\n    multiple: false, // true: select like checkbox; false: select like radio button\n\n    events: {\n        'click .remove': 'remove',\n        'click': 'select'\n    },\n\n    initialize: function initialize(options) {\n        _.extend(this, _.pick(options, 'width', 'height', 'imageSize', 'removeable', 'multiple'));\n\n        this.render();\n\n        // Responsive size\n        this.updateSize();\n        $(window).resize(function () {\n            preview.updateSize();\n        });\n\n        this.listenTo(this.model, 'change', this.update);\n    },\n\n    render: function render() {\n        this.$el.html(this.template(this.model.attributes));\n        this.update();\n        return this;\n    },\n\n    update: function update() {\n        if (this.removeable) {\n            this.$('.remove').show();\n        } else {\n            this.$('.remove').hide();\n        }\n\n        this.updateImage();\n        this.updateSize();\n        this.updateSelect();\n        this.updateProgress();\n    },\n\n    updateSize: function updateSize() {\n        this.$el.css('width', this.width + 'px'); // max-width controlled by CSS.\n        this.$el.css('height', this.$el.width() * this.height / this.width);\n    },\n\n    select: function select() {\n        if (this.multiple) {\n            this.model.set({ selected: !this.model.get('selected') });\n        } else {\n            this.model.set({ selected: true });\n            this.trigger('select', this);\n        }\n    },\n\n    unselect: function unselect() {\n        this.model.set({ selected: false });\n    },\n\n    updateSelect: function updateSelect() {\n        if (!this.model.get('selectable')) {\n            return;\n        }\n\n        if (this.model.get('selected')) {\n            this.$el.addClass('selected');\n        } else {\n            this.$el.removeClass('selected');\n        }\n    },\n\n    updateProgress: function updateProgress() {\n        var progress = this.model.get('progress');\n        if (progress === false) {\n            this.$('.progress').hide();\n        } else {\n            this.$('.progress-bar').css('width', progress + '%');\n            this.$('.progress').show();\n        }\n    },\n\n    updateImage: function updateImage() {\n        var url = '';\n        if (this.model.get('file_urls')) {\n            url = this.model.get('file_urls')[this.imageSize];\n        }\n        this.$el.css('background-image', 'url(' + url + ')');\n    }\n});\n\n},{\"../utility/template\":6}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}